{
  "Glueful route snippet": {
    "prefix": "gf-route",
    "body": [
      "$router->get('${1:/path}', [${2:App\\\\Http\\\\Controllers\\\\HomeController}::class, '${3:index}'])",
      "    ->middleware([${4:AuthMiddleware::class}]);"
    ],
    "description": "Glueful route definition"
  },
  "Glueful route group": {
    "prefix": "gf-group",
    "body": [
      "$router->group(['prefix' => '${1:api}', 'middleware' => [${2:AuthMiddleware::class}]], function (Router $router) {",
      "    $router->get('${3:/users}', [${4:UserController}::class, '${5:index}']);",
      "    $router->post('${6:/users}', [${4:UserController}::class, '${7:store}']);",
      "});"
    ],
    "description": "Glueful route group with middleware"
  },
  "Glueful route attribute": {
    "prefix": "gf-attr-route",
    "body": [
      "#[Route('${1:/api/users}', '${2:GET}', middleware: [${3:AuthMiddleware::class}], name: '${4:users.index}')]",
      "public function ${5:index}(): Response",
      "{",
      "    ${6:// Implementation}",
      "    return new ApiResponse(['${7:data}' => []]);",
      "}"
    ],
    "description": "Glueful route with PHP 8 attribute"
  },
  "Glueful controller class": {
    "prefix": "gf-controller",
    "body": [
      "<?php",
      "",
      "declare(strict_types=1);",
      "",
      "namespace ${1:App\\\\Http\\\\Controllers};",
      "",
      "use Glueful\\\\Controllers\\\\BaseController;",
      "use Glueful\\\\Http\\\\Response;",
      "use Glueful\\\\Routing\\\\Attributes\\\\Route;",
      "use Glueful\\\\Repository\\\\RepositoryFactory;",
      "use Glueful\\\\Auth\\\\AuthenticationManager;",
      "use Glueful\\\\Serialization\\\\Serializer;",
      "use Symfony\\\\Component\\\\HttpFoundation\\\\Request;",
      "",
      "/**",
      " * ${2:User} Controller",
      " *",
      " * ${3:Handles user-related operations including CRUD and authentication.}",
      " * ${4:Extends BaseController for enterprise features like caching and authorization.}",
      " *",
      " * @package ${1:App\\\\Http\\\\Controllers}",
      " */",
      "class ${5:${TM_FILENAME_BASE}} extends BaseController",
      "{",
      "    /**",
      "     * Constructor with dependency injection",
      "     */",
      "    public function __construct(",
      "        ?RepositoryFactory $repositoryFactory = null,",
      "        ?AuthenticationManager $authManager = null,",
      "        ?Request $request = null,",
      "        ?Serializer $serializer = null",
      "    ) {",
      "        parent::__construct($repositoryFactory, $authManager, $request, $serializer);",
      "    }",
      "",
      "    #[Route('/${6:users}', 'GET')]",
      "    public function index(Request $request): Response",
      "    {",
      "        ${7:// Fetch data with repository}",
      "        $users = $this->repositoryFactory->get('${8:users}')->findAll();",
      "        ",
      "        ${9:// Use helper method from BaseController}",
      "        return $this->success($users, 'Users retrieved successfully');",
      "    }",
      "",
      "    #[Route('/${6:users}', 'POST')]",
      "    public function store(Request $request): Response",
      "    {",
      "        try {",
      "            ${10:// Get and validate request data}",
      "            $data = $this->getRequestData();",
      "            ",
      "            ${11:// Validate request (optional)}",
      "            $validationError = $this->validateRequest($data, [",
      "                '${12:name}' => 'required|max:100',",
      "                '${13:email}' => 'required|email'",
      "            ]);",
      "            ",
      "            if ($validationError) {",
      "                return $validationError;",
      "            }",
      "            ",
      "            ${14:// Create new record}",
      "            $user = $this->repositoryFactory->get('${8:users}')->create($data);",
      "            ",
      "            ${15:// Use helper method from BaseController}",
      "            return $this->created($user, 'User created successfully');",
      "            ",
      "        } catch (\\\\Exception $e) {",
      "            return $this->handleException($e);",
      "        }",
      "    }",
      "",
      "    #[Route('/${6:users}/{id}', 'GET')]",
      "    public function show(Request $request, string $id): Response",
      "    {",
      "        ${16:// Fetch single record}",
      "        $user = $this->repositoryFactory->get('${8:users}')->find($id);",
      "        ",
      "        if (!$user) {",
      "            return $this->notFound('User not found');",
      "        }",
      "        ",
      "        ${17:// Use serialization groups if needed}",
      "        return $this->serializeResponse($user, ['${18:public}'], 'User retrieved successfully');",
      "    }",
      "",
      "    #[Route('/${6:users}/{id}', 'PUT')]",
      "    public function update(Request $request, string $id): Response",
      "    {",
      "        try {",
      "            ${19:// Get PUT/PATCH data}",
      "            $data = $this->getPutData();",
      "            ",
      "            ${20:// Update record}",
      "            $user = $this->repositoryFactory->get('${8:users}')->update($id, $data);",
      "            ",
      "            if (!$user) {",
      "                return $this->notFound('User not found');",
      "            }",
      "            ",
      "            return $this->success($user, 'User updated successfully');",
      "            ",
      "        } catch (\\\\Exception $e) {",
      "            return $this->handleException($e);",
      "        }",
      "    }",
      "",
      "    #[Route('/${6:users}/{id}', 'DELETE')]",
      "    public function destroy(Request $request, string $id): Response",
      "    {",
      "        try {",
      "            ${21:// Delete record}",
      "            $deleted = $this->repositoryFactory->get('${8:users}')->delete($id);",
      "            ",
      "            if (!$deleted) {",
      "                return $this->notFound('User not found');",
      "            }",
      "            ",
      "            return $this->success(null, 'User deleted successfully');",
      "            ",
      "        } catch (\\\\Exception $e) {",
      "            return $this->handleException($e);",
      "        }",
      "    }",
      "",
      "    ${22:// Example of cached response}",
      "    #[Route('/${6:users}/stats', 'GET')]",
      "    public function stats(Request $request): Response",
      "    {",
      "        $stats = $this->repositoryFactory->get('${8:users}')->getStats();",
      "        ",
      "        ${23:// Cache public data for 1 hour}",
      "        return $this->publicSuccess($stats, 'User statistics retrieved', 3600);",
      "    }",
      "",
      "    ${24:// Example of paginated response}",
      "    #[Route('/${6:users}/paginated', 'GET')]",
      "    public function paginated(Request $request): Response",
      "    {",
      "        $page = (int) $request->query->get('page', 1);",
      "        $limit = (int) $request->query->get('limit', 10);",
      "        ",
      "        $result = $this->repositoryFactory->get('${8:users}')->paginate($page, $limit);",
      "        ",
      "        return $this->paginated(",
      "            $result['data'],",
      "            [",
      "                'page' => $page,",
      "                'limit' => $limit,",
      "                'total' => $result['total'],",
      "                'pages' => $result['pages']",
      "            ],",
      "            ['${18:public}'],",
      "            'Users paginated successfully'",
      "        );",
      "    }",
      "",
      "    ${25:// Alternative: Using static Response methods (without BaseController)}",
      "    #[Route('/${6:users}/search', 'GET')]",
      "    public function search(Request $request): Response",
      "    {",
      "        $query = $request->query->get('q', '');",
      "        ",
      "        if (empty($query)) {",
      "            ${26:// Static validation error method}",
      "            return Response::validation(['q' => 'Search query is required'], 'Validation failed');",
      "        }",
      "        ",
      "        $results = $this->repositoryFactory->get('${8:users}')->search($query);",
      "        ",
      "        ${27:// Static success method - works without extending BaseController}",
      "        return Response::success($results, 'Search completed successfully');",
      "    }",
      "}"
    ],
    "description": "Glueful controller with proper Response patterns and BaseController helpers"
  },
  "Glueful standalone controller": {
    "prefix": "gf-standalone-controller",
    "body": [
      "<?php",
      "",
      "declare(strict_types=1);",
      "",
      "namespace ${1:App\\\\Http\\\\Controllers};",
      "",
      "use Glueful\\\\Http\\\\Response;",
      "use Glueful\\\\Routing\\\\Attributes\\\\Route;",
      "use Glueful\\\\Repository\\\\RepositoryFactory;",
      "use Glueful\\\\Serialization\\\\Serializer;",
      "use Glueful\\\\Serialization\\\\Context\\\\SerializationContext;",
      "use Symfony\\\\Component\\\\HttpFoundation\\\\Request;",
      "",
      "/**",
      " * ${2:User} Controller",
      " *",
      " * ${3:Handles user-related operations using static Response methods.}",
      " * ${4:Standalone controller without BaseController dependency.}",
      " *",
      " * @package ${1:App\\\\Http\\\\Controllers}",
      " */",
      "class ${5:${TM_FILENAME_BASE}}",
      "{",
      "    private RepositoryFactory $repositoryFactory;",
      "    private Serializer $serializer;",
      "",
      "    public function __construct(",
      "        ?RepositoryFactory $repositoryFactory = null,",
      "        ?Serializer $serializer = null",
      "    ) {",
      "        $this->repositoryFactory = $repositoryFactory ?? new RepositoryFactory();",
      "        $this->serializer = $serializer ?? new Serializer();",
      "        ",
      "        ${6:// Set global serializer for Response class}",
      "        Response::setSerializer($this->serializer);",
      "    }",
      "",
      "    #[Route('/${7:users}', 'GET')]",
      "    public function index(Request $request): Response",
      "    {",
      "        ${8:// Fetch data with repository}",
      "        $users = $this->repositoryFactory->get('${9:users}')->findAll();",
      "        ",
      "        ${10:// Static success method}",
      "        return Response::success($users, 'Users retrieved successfully');",
      "    }",
      "",
      "    #[Route('/${7:users}', 'POST')]",
      "    public function store(Request $request): Response",
      "    {",
      "        try {",
      "            ${11:// Get request data}",
      "            $data = $this->getRequestData($request);",
      "            ",
      "            ${12:// Basic validation}",
      "            $errors = $this->validateData($data, [",
      "                '${13:name}' => 'required|max:100',",
      "                '${14:email}' => 'required|email'",
      "            ]);",
      "            ",
      "            if (!empty($errors)) {",
      "                return Response::validation($errors, 'Validation failed');",
      "            }",
      "            ",
      "            ${15:// Create new record}",
      "            $user = $this->repositoryFactory->get('${9:users}')->create($data);",
      "            ",
      "            ${16:// Static created method}",
      "            return Response::created($user, 'User created successfully');",
      "            ",
      "        } catch (\\\\Exception $e) {",
      "            ${17:// Log error}",
      "            error_log('Controller exception: ' . $e->getMessage());",
      "            return Response::serverError('An unexpected error occurred');",
      "        }",
      "    }",
      "",
      "    #[Route('/${7:users}/{id}', 'GET')]",
      "    public function show(Request $request, string $id): Response",
      "    {",
      "        ${18:// Fetch single record}",
      "        $user = $this->repositoryFactory->get('${9:users}')->find($id);",
      "        ",
      "        if (!$user) {",
      "            return Response::notFound('User not found');",
      "        }",
      "        ",
      "        ${19:// Use serialization context for field control}",
      "        $context = SerializationContext::create()->withGroups(['${20:public}']);",
      "        return Response::success($user, 'User retrieved successfully', $context);",
      "    }",
      "",
      "    #[Route('/${7:users}/{id}', 'PUT')]",
      "    public function update(Request $request, string $id): Response",
      "    {",
      "        try {",
      "            ${21:// Get PUT data}",
      "            $data = $this->getPutData($request);",
      "            ",
      "            ${22:// Update record}",
      "            $user = $this->repositoryFactory->get('${9:users}')->update($id, $data);",
      "            ",
      "            if (!$user) {",
      "                return Response::notFound('User not found');",
      "            }",
      "            ",
      "            return Response::success($user, 'User updated successfully');",
      "            ",
      "        } catch (\\\\Exception $e) {",
      "            error_log('Update error: ' . $e->getMessage());",
      "            return Response::serverError('Update failed');",
      "        }",
      "    }",
      "",
      "    #[Route('/${7:users}/{id}', 'DELETE')]",
      "    public function destroy(Request $request, string $id): Response",
      "    {",
      "        try {",
      "            ${23:// Delete record}",
      "            $deleted = $this->repositoryFactory->get('${9:users}')->delete($id);",
      "            ",
      "            if (!$deleted) {",
      "                return Response::notFound('User not found');",
      "            }",
      "            ",
      "            return Response::success(null, 'User deleted successfully');",
      "            ",
      "        } catch (\\\\Exception $e) {",
      "            error_log('Delete error: ' . $e->getMessage());",
      "            return Response::serverError('Delete failed');",
      "        }",
      "    }",
      "",
      "    ${24:// Helper method for request data extraction}",
      "    private function getRequestData(Request $request): array",
      "    {",
      "        $contentType = $request->headers->get('Content-Type', '');",
      "        ",
      "        if (str_contains($contentType, 'application/json')) {",
      "            $content = $request->getContent();",
      "            return $content !== '' ? json_decode($content, true) ?? [] : [];",
      "        }",
      "        ",
      "        return $request->request->all();",
      "    }",
      "",
      "    ${25:// Helper method for PUT data extraction}",
      "    private function getPutData(Request $request): array",
      "    {",
      "        $contentType = $request->headers->get('Content-Type', '');",
      "        ",
      "        if (str_contains($contentType, 'application/json')) {",
      "            $content = $request->getContent();",
      "            return $content !== '' ? json_decode($content, true) ?? [] : [];",
      "        }",
      "        ",
      "        $content = $request->getContent();",
      "        parse_str($content, $parsedData);",
      "        return $parsedData;",
      "    }",
      "",
      "    ${26:// Basic validation helper}",
      "    private function validateData(array $data, array $rules): array",
      "    {",
      "        $errors = [];",
      "        ",
      "        foreach ($rules as $field => $rule) {",
      "            $isRequired = str_contains($rule, 'required');",
      "            $value = $data[$field] ?? null;",
      "            ",
      "            if ($isRequired && ($value === null || $value === '')) {",
      "                $errors[$field] = \"{$field} is required\";",
      "                continue;",
      "            }",
      "            ",
      "            if ($value !== null && str_contains($rule, 'email')) {",
      "                if (filter_var($value, FILTER_VALIDATE_EMAIL) === false) {",
      "                    $errors[$field] = \"{$field} must be a valid email\";",
      "                }",
      "            }",
      "            ",
      "            if ($value !== null && preg_match('/max:(\\\\d+)/', $rule, $matches)) {",
      "                $maxLength = (int) $matches[1];",
      "                if (strlen((string) $value) > $maxLength) {",
      "                    $errors[$field] = \"{$field} must not exceed {$maxLength} characters\";",
      "                }",
      "            }",
      "        }",
      "        ",
      "        return $errors;",
      "    }",
      "}"
    ],
    "description": "Glueful standalone controller using static Response methods without BaseController"
  },
  "Glueful middleware class": {
    "prefix": "gf-middleware",
    "body": [
      "<?php",
      "",
      "declare(strict_types=1);",
      "",
      "namespace ${1:App\\\\Http\\\\Middleware};",
      "",
      "use Glueful\\\\Routing\\\\RouteMiddleware;",
      "use Symfony\\\\Component\\\\HttpFoundation\\\\Request;",
      "use Glueful\\\\Http\\\\Response;",
      "",
      "class ${2:${TM_FILENAME_BASE}} implements RouteMiddleware",
      "{",
      "    public function handle(Request $request, callable $next, mixed ...$params): mixed",
      "    {",
      "        ${3:// Before request processing}",
      "        ${4:// Optional: use $params for middleware configuration}",
      "",
      "        $response = $next($request);",
      "",
      "        ${5:// After request processing}",
      "",
      "        return $response;",
      "    }",
      "}"
    ],
    "description": "Glueful native middleware class"
  },
  "Glueful PSR-15 integration": {
    "prefix": "gf-psr15",
    "body": [
      "use Glueful\\\\Http\\\\Bridge\\\\Psr15\\\\Psr15AdapterFactory;",
      "use ${1:SomeVendor\\\\SomePsr15Middleware};",
      "",
      "// Wrap existing PSR-15 middleware for use in Glueful",
      "$psr15Middleware = new ${1:SomePsr15Middleware}();",
      "$gluefulMiddleware = Psr15AdapterFactory::wrap($psr15Middleware);",
      "",
      "// Use in route definition",
      "$router->get('${2:/api/example}', [${3:Controller}::class, '${4:method}'])",
      "    ->middleware([$gluefulMiddleware]);"
    ],
    "description": "Integrate existing PSR-15 middleware into Glueful"
  },
  "Glueful service definition": {
    "prefix": "gf-service",
    "body": [
      "// Autowired service (recommended)",
      "${1:App\\\\Services\\\\UserService}::class => [",
      "    'autowire' => true,",
      "    'shared' => ${2:true},",
      "    'alias' => '${3:user_service}',",
      "    'tags' => [['name' => '${4:domain.user}', 'priority' => ${5:50}]],",
      "],",
      "",
      "// Factory service",
      "'${6:logger}' => [",
      "    'factory' => [${7:App\\\\Factories\\\\LoggerFactory}::class, '${8:create}'],",
      "    'shared' => true,",
      "],",
      "",
      "// Service with arguments",
      "'${9:cache}' => [",
      "    'class' => ${10:App\\\\Services\\\\CacheService}::class,",
      "    'arguments' => ['${11:@redis}', '${12:@logger}'],",
      "    'shared' => true,",
      "]"
    ],
    "description": "Glueful service definitions using array DSL"
  },
  "Glueful service provider": {
    "prefix": "gf-provider",
    "body": [
      "<?php",
      "",
      "declare(strict_types=1);",
      "",
      "namespace ${1:App\\\\Providers};",
      "",
      "use Glueful\\\\Extensions\\\\ServiceProvider;",
      "use Psr\\\\Container\\\\ContainerInterface;",
      "",
      "class ${2:${TM_FILENAME_BASE}} extends ServiceProvider",
      "{",
      "    /**",
      "     * Register services in DI container using array DSL",
      "     * @return array<string, mixed>",
      "     */",
      "    public static function services(): array",
      "    {",
      "        return [",
      "            // Autowired service",
      "            ${3:App\\\\Services\\\\ExampleService}::class => [",
      "                'autowire' => true,",
      "                'shared' => true,",
      "                'alias' => '${4:example_service}',",
      "            ],",
      "",
      "            // Factory service",
      "            '${5:custom_service}' => [",
      "                'factory' => [${6:App\\\\Factories\\\\CustomFactory}::class, '${7:create}'],",
      "                'shared' => true,",
      "            ],",
      "",
      "            ${8:// Additional service definitions}",
      "        ];",
      "    }",
      "",
      "    /**",
      "     * Register runtime configuration and setup",
      "     */",
      "    public function register(): void",
      "    {",
      "        ${9:// Config merging, route registration, etc.}",
      "    }",
      "",
      "    /**",
      "     * Boot after all providers are registered",
      "     */",
      "    public function boot(): void",
      "    {",
      "        ${10:// Provider boot logic}",
      "    }",
      "}"
    ],
    "description": "Glueful service provider with array DSL"
  },
  "Glueful migration class": {
    "prefix": "gf-migration",
    "body": [
      "<?php",
      "",
      "namespace Glueful\\\\Database\\\\Migrations;",
      "",
      "use Glueful\\\\Database\\\\Migrations\\\\MigrationInterface;",
      "use Glueful\\\\Database\\\\Schema\\\\Interfaces\\\\SchemaBuilderInterface;",
      "",
      "/**",
      " * ${1:Create Users Table} Migration",
      " *",
      " * ${2:Creates the users table with authentication fields}",
      " *",
      " * @package Glueful\\\\Database\\\\Migrations",
      " */",
      "class ${3:CreateUsersTable} implements MigrationInterface",
      "{",
      "    /**",
      "     * Execute the migration",
      "     *",
      "     * @param SchemaBuilderInterface $schema Database schema builder",
      "     */",
      "    public function up(SchemaBuilderInterface $schema): void",
      "    {",
      "        $schema->createTable('${4:users}', function ($table) {",
      "            $table->bigInteger('id')->primary()->autoIncrement();",
      "            $table->string('uuid', 12);",
      "            $table->string('${5:name}', 255);",
      "            $table->string('${6:email}', 255);",
      "            ${7:// Add additional columns}",
      "            $table->timestamp('created_at')->default('CURRENT_TIMESTAMP');",
      "            $table->timestamp('updated_at')->nullable();",
      "            $table->timestamp('deleted_at')->nullable();",
      "",
      "            // Add indexes",
      "            $table->unique('uuid');",
      "            $table->unique('${6:email}');",
      "            ${8:// Add additional indexes}",
      "        });",
      "    }",
      "",
      "    /**",
      "     * Reverse the migration",
      "     *",
      "     * @param SchemaBuilderInterface $schema Database schema manager",
      "     */",
      "    public function down(SchemaBuilderInterface $schema): void",
      "    {",
      "        $schema->dropTableIfExists('${4:users}');",
      "    }",
      "",
      "    /**",
      "     * Get migration description",
      "     *",
      "     * @return string Migration description",
      "     */",
      "    public function getDescription(): string",
      "    {",
      "        return '${9:Creates users table with authentication fields}';",
      "    }",
      "}"
    ],
    "description": "Glueful database migration with proper interface"
  },
  "Glueful job class": {
    "prefix": "gf-job",
    "body": [
      "<?php",
      "",
      "declare(strict_types=1);",
      "",
      "namespace ${1:App\\\\Jobs};",
      "",
      "use Glueful\\\\Queue\\\\Job;",
      "",
      "class ${2:${TM_FILENAME_BASE}} extends Job",
      "{",
      "    /**",
      "     * Execute the job",
      "     */",
      "    public function handle(): void",
      "    {",
      "        $data = $this->getData();",
      "        ",
      "        ${3:// Job implementation}",
      "        ",
      "        // Log success",
      "        logger()->info('${4:Job completed successfully}', [",
      "            'job_uuid' => $this->getUuid(),",
      "            ${5:// Additional log data}",
      "        ]);",
      "    }",
      "",
      "    /**",
      "     * Handle job failure",
      "     */",
      "    public function failed(\\\\Exception $exception): void",
      "    {",
      "        $data = $this->getData();",
      "        ",
      "        // Log failure",
      "        logger()->error('${6:Job failed}', [",
      "            'job_uuid' => $this->getUuid(),",
      "            'error' => $exception->getMessage(),",
      "            'attempts' => $this->getAttempts()",
      "        ]);",
      "        ",
      "        ${7:// Handle failure (notifications, cleanup, etc.)}",
      "    }",
      "",
      "    /**",
      "     * Configure job settings",
      "     */",
      "    public function getMaxAttempts(): int",
      "    {",
      "        return ${8:3}; // Retry attempts",
      "    }",
      "",
      "    public function getTimeout(): int",
      "    {",
      "        return ${9:60}; // Timeout in seconds",
      "    }",
      "}"
    ],
    "description": "Glueful queue job class with error handling"
  },
  "Glueful event class": {
    "prefix": "gf-event",
    "body": [
      "<?php",
      "",
      "declare(strict_types=1);",
      "",
      "namespace ${1:App\\\\Events};",
      "",
      "use Glueful\\\\Events\\\\Contracts\\\\BaseEvent;",
      "",
      "/**",
      " * ${2:User Registration} Event",
      " *",
      " * ${3:Dispatched when a user successfully registers.}",
      " * ${4:Used for welcome emails, analytics, and account setup.}",
      " *",
      " * @package ${1:App\\\\Events}",
      " */",
      "class ${5:${TM_FILENAME_BASE}} extends BaseEvent",
      "{",
      "    /**",
      "     * @param ${6:string} $${7:userId} ${8:User identifier}",
      "     * @param array<string, mixed> $metadata Additional event metadata",
      "     */",
      "    public function __construct(",
      "        private readonly ${6:string} $${7:userId},",
      "        ${9:// Additional readonly properties}",
      "        array $metadata = []",
      "    ) {",
      "        parent::__construct();",
      "",
      "        foreach ($metadata as $key => $value) {",
      "            $this->setMetadata($key, $value);",
      "        }",
      "    }",
      "",
      "    public function get${7/(.)(.*)/\\u$1$2/}(): ${6:string}",
      "    {",
      "        return $this->${7:userId};",
      "    }",
      "",
      "    ${10:// Additional getter methods}",
      "",
      "    /**",
      "     * Get metadata value with default",
      "     */",
      "    public function getMetadataValue(string $key, mixed $default = null): mixed",
      "    {",
      "        return $this->getMetadata($key) ?? $default;",
      "    }",
      "}"
    ],
    "description": "Glueful event class extending BaseEvent"
  },
  "Glueful listener class": {
    "prefix": "gf-listener",
    "body": [
      "<?php",
      "",
      "declare(strict_types=1);",
      "",
      "namespace ${1:App\\\\Listeners};",
      "",
      "use ${2:App\\\\Events\\\\UserRegisteredEvent};",
      "use Psr\\\\Log\\\\LoggerInterface;",
      "",
      "/**",
      " * ${3:User Registration} Event Listener",
      " *",
      " * ${4:Handles user registration events for welcome emails and setup.}",
      " *",
      " * @package ${1:App\\\\Listeners}",
      " */",
      "class ${5:${TM_FILENAME_BASE}}",
      "{",
      "    public function __construct(",
      "        private LoggerInterface $logger",
      "        ${6:// Additional dependencies}",
      "    ) {",
      "    }",
      "",
      "    public function on${7:UserRegistered}(${2:UserRegisteredEvent} $event): void",
      "    {",
      "        ${8:// Listener implementation}",
      "        ",
      "        $this->logger->info('${9:User registration processed}', [",
      "            'event_id' => $event->getEventId(),",
      "            'user_id' => $event->getUserId(),",
      "            ${10:// Additional log context}",
      "        ]);",
      "    }",
      "}"
    ],
    "description": "Glueful event listener class"
  },
  "Glueful event subscriber": {
    "prefix": "gf-subscriber",
    "body": [
      "<?php",
      "",
      "declare(strict_types=1);",
      "",
      "namespace ${1:App\\\\Listeners};",
      "",
      "use ${2:App\\\\Events\\\\UserRegisteredEvent};",
      "use ${3:App\\\\Events\\\\UserUpdatedEvent};",
      "use Symfony\\\\Component\\\\EventDispatcher\\\\EventSubscriberInterface;",
      "use Psr\\\\Log\\\\LoggerInterface;",
      "",
      "/**",
      " * ${4:User Management} Event Subscriber",
      " *",
      " * ${5:Subscribes to multiple user-related events.}",
      " *",
      " * @package ${1:App\\\\Listeners}",
      " */",
      "class ${6:${TM_FILENAME_BASE}} implements EventSubscriberInterface",
      "{",
      "    public function __construct(",
      "        private LoggerInterface $logger",
      "        ${7:// Additional dependencies}",
      "    ) {",
      "    }",
      "",
      "    /**",
      "     * @return array<string, string>",
      "     */",
      "    public static function getSubscribedEvents(): array",
      "    {",
      "        return [",
      "            ${2:UserRegisteredEvent}::class => 'onUserRegistered',",
      "            ${3:UserUpdatedEvent}::class => 'onUserUpdated',",
      "            ${8:// Additional event mappings}",
      "        ];",
      "    }",
      "",
      "    public function onUserRegistered(${2:UserRegisteredEvent} $event): void",
      "    {",
      "        ${9:// Handle user registration}",
      "        ",
      "        $this->logger->info('User registered', [",
      "            'event_id' => $event->getEventId(),",
      "            'user_id' => $event->getUserId(),",
      "        ]);",
      "    }",
      "",
      "    public function onUserUpdated(${3:UserUpdatedEvent} $event): void",
      "    {",
      "        ${10:// Handle user update}",
      "        ",
      "        $this->logger->info('User updated', [",
      "            'event_id' => $event->getEventId(),",
      "            'user_id' => $event->getUserId(),",
      "        ]);",
      "    }",
      "}"
    ],
    "description": "Glueful event subscriber with multiple event handlers"
  },
  "Glueful cache usage": {
    "prefix": "gf-cache",
    "body": [
      "use Glueful\\\\Cache\\\\CacheStore;",
      "",
      "// Get cache store instance",
      "/** @var CacheStore<mixed> $cache */",
      "$cache = $container->get(CacheStore::class);",
      "",
      "// Basic cache operations",
      "$value = $cache->get('${1:user:123}', ${2:null});",
      "$cache->set('${1:user:123}', ${3:$userData}, ${4:3600});",
      "$cache->delete('${1:user:123}');",
      "",
      "// Remember pattern (cache-aside)",
      "$userData = $cache->remember('${1:user:123}', function () use ($userId) {",
      "    ${5:// Expensive operation - fetch from database}",
      "    return $this->userRepository->find($userId);",
      "}, ${4:3600});",
      "",
      "// Multiple operations",
      "$users = $cache->mget(['user:1', 'user:2', 'user:3']);",
      "$cache->mset([",
      "    'user:1' => $user1Data,",
      "    'user:2' => $user2Data",
      "], ${4:3600});",
      "",
      "// Advanced operations",
      "$cache->setNx('${6:lock:process}', true, 300); // Set if not exists",
      "$viewCount = $cache->increment('${7:views:article:123}'); // Atomic increment",
      "$ttl = $cache->ttl('${1:user:123}'); // Get remaining TTL",
      "",
      "// Pattern deletion (wildcard)",
      "$cache->deletePattern('user:*'); // Delete all user cache keys"
    ],
    "description": "Glueful cache usage patterns with CacheStore"
  },
  "Glueful field selection": {
    "prefix": "gf-fields",
    "body": [
      "use Glueful\\\\Support\\\\FieldSelection\\\\FieldSelector;",
      "use Glueful\\\\Support\\\\FieldSelection\\\\Projector;",
      "use Glueful\\\\Routing\\\\Attributes\\\\{Route, Fields};",
      "use Symfony\\\\Component\\\\HttpFoundation\\\\Request;",
      "",
      "#[Route('/${1:users}/{id}', 'GET')]",
      "#[Fields(allowed: ['${2:id,name,email,posts,posts.comments}'], strict: ${3:true})]",
      "public function ${4:show}(Request $request, string $id, FieldSelector $selector): array",
      "{",
      "    // Fetch base data",
      "    $user = $this->${5:userRepository}->findAsArray($id);",
      "    ",
      "    // Conditional loading based on requested fields",
      "    if ($selector->requested('${6:posts}')) {",
      "        $user['${6:posts}'] = $this->${7:postRepository}->findByUserId($id);",
      "        ",
      "        // Nested field selection",
      "        if ($selector->requested('${6:posts}.${8:comments}')) {",
      "            foreach ($user['${6:posts}'] as &$post) {",
      "                $post['${8:comments}'] = $this->${9:commentRepository}->findByPostId($post['id']);",
      "            }",
      "        }",
      "    }",
      "    ",
      "    // Project fields using Projector",
      "    $projector = new Projector();",
      "    $result = $projector->project($user, $selector);",
      "    ",
      "    return ['data' => $result];",
      "}",
      "",
      "// Request examples:",
      "// REST-style: GET /${1:users}/123?fields=id,name,email&expand=${6:posts}.${10:title},${6:posts}.${8:comments}.${11:text}",
      "// GraphQL-style: GET /${1:users}/123?fields=user(id,name,${6:posts}(${10:title},${8:comments}(${11:text})))",
      "// Wildcard: GET /${1:users}/123?fields=*&expand=${6:posts}.${8:comments}"
    ],
    "description": "Glueful GraphQL-style field selection with projector"
  },
  "Glueful validation": {
    "prefix": "gf-validate",
    "body": [
      "use Glueful\\\\Validation\\\\Validator;",
      "use Glueful\\\\Validation\\\\Rules\\\\{Required, Email, Length, Type};",
      "",
      "// Create validator with rules",
      "$validator = new Validator([",
      "    '${1:username}' => [",
      "        new Required(message: 'Username is required'),",
      "        new Type('string'),",
      "        new Length(min: 3, max: 50)",
      "    ],",
      "    '${2:email}' => [",
      "        new Required(),",
      "        new Email(mode: 'strict')",
      "    ],",
      "    '${3:age}' => [",
      "        new Type('integer'),",
      "        new Range(min: 18, max: 99)",
      "    ]",
      "]);",
      "",
      "// Validate request data",
      "$errors = $validator->validate($request->all());",
      "",
      "if (count($errors) > 0) {",
      "    return new Response(['errors' => $errors], 422);",
      "}",
      "",
      "// Get filtered/sanitized data",
      "$validated = $validator->getFiltered();"
    ],
    "description": "Glueful validation with rule objects"
  },
  "Glueful validation DTO": {
    "prefix": "gf-validate-dto",
    "body": [
      "use Glueful\\\\Validation\\\\Constraints\\\\{Required, Email, StringLength, Choice, Range};",
      "",
      "class ${1:UserDTO}",
      "{",
      "    #[Required]",
      "    #[StringLength(min: 3, max: 50)]",
      "    public string $${2:username};",
      "    ",
      "    #[Required]",
      "    #[Email(mode: 'strict')]",
      "    public string $${3:email};",
      "    ",
      "    #[Range(min: 18, max: 99)]",
      "    public ?int $${4:age} = null;",
      "    ",
      "    #[Choice(choices: ['${5:admin}', '${6:user}', '${7:guest}'])]",
      "    public string $${8:role} = '${6:user}';",
      "}",
      "",
      "// Usage in controller:",
      "$validator = container()->get(Validator::class);",
      "$dto = new ${1:UserDTO}();",
      "// Map request data to DTO properties...",
      "",
      "if (!$validator->validate($dto)) {",
      "    $errors = $validator->getErrors();",
      "    return new Response(['errors' => $errors], 422);",
      "}",
      "",
      "// DTO is valid, use it safely"
    ],
    "description": "Glueful validation with DTO and attributes"
  },
  "Glueful permission attributes": {
    "prefix": "gf-permissions",
    "body": [
      "use Glueful\\\\Auth\\\\Attributes\\\\RequiresPermission;",
      "use Glueful\\\\Auth\\\\Attributes\\\\RequiresRole;",
      "",
      "${1:// Class-level role requirement}",
      "#[RequiresRole('${2:admin}')]",
      "class ${3:${TM_FILENAME_BASE}}",
      "{",
      "    ${4:// Method-level permission requirement}",
      "    #[RequiresPermission('${5:posts.create}')]",
      "    public function ${6:create}(Request $request): Response",
      "    {",
      "        ${7:// Implementation}",
      "        return $this->success($data, 'Created successfully');",
      "    }",
      "",
      "    ${8:// Multiple permissions (both required)}",
      "    #[RequiresPermission('${9:posts.edit}')]",
      "    #[RequiresPermission('${10:posts.publish}')]",
      "    public function ${11:publish}(Request $request, string $id): Response",
      "    {",
      "        ${12:// Implementation}",
      "        return $this->success($data, 'Published successfully');",
      "    }",
      "",
      "    ${13:// Multiple roles (any role grants access)}",
      "    #[RequiresRole('${14:editor}')]",
      "    #[RequiresRole('${2:admin}')]",
      "    public function ${15:review}(Request $request): Response",
      "    {",
      "        ${16:// Implementation}",
      "        return $this->success($data, 'Review completed');",
      "    }",
      "",
      "    ${17:// Permission with resource specification}",
      "    #[RequiresPermission('${18:documents.edit}', resource: '${19:documents}')]",
      "    public function ${20:editDocument}(Request $request, string $id): Response",
      "    {",
      "        ${21:// Implementation}",
      "        return $this->success($data, 'Document updated');",
      "    }",
      "}"
    ],
    "description": "Glueful permission and role attributes for controllers"
  },
  "Glueful policy class": {
    "prefix": "gf-policy",
    "body": [
      "<?php",
      "",
      "declare(strict_types=1);",
      "",
      "namespace ${1:App\\\\Policies};",
      "",
      "use Glueful\\\\Permissions\\\\PolicyInterface;",
      "use Glueful\\\\Auth\\\\UserIdentity;",
      "use Glueful\\\\Permissions\\\\Context;",
      "use ${2:App\\\\Models\\\\Post};",
      "",
      "/**",
      " * ${3:Post} Policy",
      " *",
      " * ${4:Handles authorization logic for post-related operations.}",
      " * ${5:Implements business rules for viewing, editing, and deleting posts.}",
      " *",
      " * @package ${1:App\\\\Policies}",
      " */",
      "class ${6:${TM_FILENAME_BASE}} implements PolicyInterface",
      "{",
      "    /**",
      "     * Determine if user can view the resource",
      "     */",
      "    public function view(UserIdentity $user, ${2:Post} $post, Context $ctx): ?bool",
      "    {",
      "        ${7:// Everyone can view published posts}",
      "        if ($post->isPublished()) {",
      "            return true;",
      "        }",
      "",
      "        ${8:// Authors can view their own drafts}",
      "        if ($post->author_id === $user->id()) {",
      "            return true;",
      "        }",
      "",
      "        ${9:// Editors can view all posts}",
      "        if (in_array('${10:editor}', $user->roles(), true)) {",
      "            return true;",
      "        }",
      "",
      "        return null; // Let other voters decide",
      "    }",
      "",
      "    /**",
      "     * Determine if user can create resources",
      "     */",
      "    public function create(UserIdentity $user, mixed $resource, Context $ctx): ?bool",
      "    {",
      "        ${11:// Users with author role or higher can create posts}",
      "        $allowedRoles = ['${12:author}', '${10:editor}', '${13:admin}'];",
      "        ",
      "        foreach ($allowedRoles as $role) {",
      "            if (in_array($role, $user->roles(), true)) {",
      "                return true;",
      "            }",
      "        }",
      "",
      "        return null;",
      "    }",
      "",
      "    /**",
      "     * Determine if user can edit the resource",
      "     */",
      "    public function edit(UserIdentity $user, ${2:Post} $post, Context $ctx): ?bool",
      "    {",
      "        ${14:// Authors can edit their own posts}",
      "        if ($post->author_id === $user->id()) {",
      "            return true;",
      "        }",
      "",
      "        ${15:// Editors can edit any post}",
      "        if (in_array('${10:editor}', $user->roles(), true)) {",
      "            return true;",
      "        }",
      "",
      "        return null;",
      "    }",
      "",
      "    /**",
      "     * Determine if user can update the resource",
      "     */",
      "    public function update(UserIdentity $user, ${2:Post} $post, Context $ctx): ?bool",
      "    {",
      "        ${16:// Same logic as edit}",
      "        return $this->edit($user, $post, $ctx);",
      "    }",
      "",
      "    /**",
      "     * Determine if user can delete the resource",
      "     */",
      "    public function delete(UserIdentity $user, ${2:Post} $post, Context $ctx): ?bool",
      "    {",
      "        ${17:// Only admins and editors can delete posts}",
      "        $allowedRoles = ['${10:editor}', '${13:admin}'];",
      "        ",
      "        foreach ($allowedRoles as $role) {",
      "            if (in_array($role, $user->roles(), true)) {",
      "                return true;",
      "            }",
      "        }",
      "",
      "        return null;",
      "    }",
      "",
      "    /**",
      "     * Determine if user can publish the resource",
      "     */",
      "    public function publish(UserIdentity $user, ${2:Post} $post, Context $ctx): ?bool",
      "    {",
      "        ${18:// Only editors and admins can publish}",
      "        $allowedRoles = ['${10:editor}', '${13:admin}'];",
      "        ",
      "        foreach ($allowedRoles as $role) {",
      "            if (in_array($role, $user->roles(), true)) {",
      "                return true;",
      "            }",
      "        }",
      "",
      "        return null;",
      "    }",
      "",
      "    ${19:// Example: Custom business logic method}",
      "    public function ${20:moderate}(UserIdentity $user, ${2:Post} $post, Context $ctx): ?bool",
      "    {",
      "        ${21:// Check if user has moderation permissions}",
      "        if (in_array('${22:moderator}', $user->roles(), true)) {",
      "            return true;",
      "        }",
      "",
      "        ${23:// Check custom attributes}",
      "        $department = $user->attr('department');",
      "        if ($department === '${24:content_review}') {",
      "            return true;",
      "        }",
      "",
      "        return null;",
      "    }",
      "}"
    ],
    "description": "Glueful policy class implementing PolicyInterface with CRUD authorization"
  },
  "Glueful custom voter": {
    "prefix": "gf-voter",
    "body": [
      "<?php",
      "",
      "declare(strict_types=1);",
      "",
      "namespace ${1:App\\\\Voters};",
      "",
      "use Glueful\\\\Permissions\\\\VoterInterface;",
      "use Glueful\\\\Permissions\\\\Vote;",
      "use Glueful\\\\Permissions\\\\Context;",
      "use Glueful\\\\Auth\\\\UserIdentity;",
      "",
      "/**",
      " * ${2:Department} Voter",
      " *",
      " * ${3:Handles department-based authorization logic.}",
      " * ${4:Grants access based on user department matching resource department.}",
      " *",
      " * @package ${1:App\\\\Voters}",
      " */",
      "class ${5:${TM_FILENAME_BASE}} implements VoterInterface",
      "{",
      "    /**",
      "     * Vote on permission request",
      "     */",
      "    public function vote(UserIdentity $user, string $permission, mixed $resource, Context $ctx): Vote",
      "    {",
      "        ${6:// Check if user's department matches resource department}",
      "        $userDepartment = $user->attr('${7:department}');",
      "        ",
      "        if (!$userDepartment) {",
      "            ${8:// No department info, abstain}",
      "            return new Vote(Vote::ABSTAIN);",
      "        }",
      "",
      "        ${9:// Check resource department}",
      "        $resourceDepartment = null;",
      "        if ($resource && method_exists($resource, 'getDepartment')) {",
      "            $resourceDepartment = $resource->getDepartment();",
      "        } elseif ($resource && property_exists($resource, '${7:department}')) {",
      "            $resourceDepartment = $resource->${7:department};",
      "        }",
      "",
      "        ${10:// Grant if departments match}",
      "        if ($resourceDepartment && $userDepartment === $resourceDepartment) {",
      "            return new Vote(Vote::GRANT, 'User belongs to resource department');",
      "        }",
      "",
      "        ${11:// Check for admin override}",
      "        if (in_array('${12:admin}', $user->roles(), true)) {",
      "            return new Vote(Vote::ABSTAIN, 'Admin can access any department');",
      "        }",
      "",
      "        ${13:// Deny access for different departments}",
      "        if ($resourceDepartment) {",
      "            return new Vote(Vote::DENY, 'User department does not match resource');",
      "        }",
      "",
      "        return new Vote(Vote::ABSTAIN);",
      "    }",
      "",
      "    /**",
      "     * Check if this voter supports the permission",
      "     */",
      "    public function supports(string $permission, mixed $resource, Context $ctx): bool",
      "    {",
      "        ${14:// Support department-related permissions}",
      "        return str_starts_with($permission, '${15:department}.') ||",
      "               str_contains($permission, '.${16:department}');",
      "    }",
      "",
      "    /**",
      "     * Voter priority (lower number = higher priority)",
      "     */",
      "    public function priority(): int",
      "    {",
      "        return ${17:10}; // After super roles, before general roles",
      "    }",
      "",
      "    ${18:// Example: Additional helper method}",
      "    private function ${19:isManagerOf}(UserIdentity $user, string $department): bool",
      "    {",
      "        $managerDepartments = $user->attr('${20:managed_departments}', []);",
      "        return in_array($department, $managerDepartments, true);",
      "    }",
      "}"
    ],
    "description": "Glueful custom voter implementing VoterInterface for specialized authorization"
  },
  "Glueful gate usage": {
    "prefix": "gf-gate",
    "body": [
      "use Glueful\\\\Permissions\\\\Gate;",
      "use Glueful\\\\Permissions\\\\Context;",
      "use Glueful\\\\Permissions\\\\Vote;",
      "use Glueful\\\\Auth\\\\UserIdentity;",
      "",
      "${1:// Get Gate instance from container}",
      "$gate = app(Gate::class);",
      "",
      "${2:// Create user identity}",
      "$user = new UserIdentity(",
      "    uuid: '${3:user-123}',",
      "    roles: [${4:'editor', 'author'}],",
      "    scopes: [${5:'read', 'write'}],",
      "    attributes: [",
      "        '${6:department}' => '${7:marketing}',",
      "        '${8:tenant_id}' => '${9:tenant-456}',",
      "        '${10:email}' => '${11:user@example.com}'",
      "    ]",
      ");",
      "",
      "${12:// Create context with additional information}",
      "$context = new Context(",
      "    tenantId: '${9:tenant-456}',",
      "    routeParams: ['id' => ${13:123}],",
      "    jwtClaims: ['sub' => '${3:user-123}'],",
      "    extra: [",
      "        '${14:ip}' => '${15:192.168.1.1}',",
      "        '${16:resource_slug}' => '${17:posts}',",
      "        '${18:ownerId}' => '${19:user-123}'",
      "    ]",
      ");",
      "",
      "${20:// Check permission}",
      "$decision = $gate->decide($user, '${21:posts.edit}', $${22:post}, $context);",
      "",
      "if ($decision === Vote::GRANT) {",
      "    ${23:// Permission granted - proceed with action}",
      "    return $this->success($data, 'Action completed');",
      "} elseif ($decision === Vote::DENY) {",
      "    ${24:// Permission explicitly denied}",
      "    return $this->forbidden('Access denied');",
      "} else {",
      "    ${25:// No decision made (ABSTAIN) - handle based on strategy}",
      "    return $this->unauthorized('Authorization required');",
      "}",
      "",
      "${26:// Alternative: Simple boolean check using PermissionManager}",
      "$manager = app('permission.manager');",
      "$canEdit = $manager->can(",
      "    userUuid: '${3:user-123}',",
      "    permission: '${21:posts.edit}',",
      "    resource: '${17:posts}',",
      "    context: ['resource_obj' => $${22:post}]",
      ");",
      "",
      "if (!$canEdit) {",
      "    return $this->forbidden('Cannot edit this post');",
      "}"
    ],
    "description": "Glueful Gate usage for manual permission checking with Context"
  },
  "Glueful permission config": {
    "prefix": "gf-permission-config",
    "body": [
      "<?php",
      "",
      "${1:// config/permissions.php}",
      "return [",
      "    ${2:// Decision strategy: 'affirmative', 'consensus', 'unanimous'}",
      "    'strategy' => '${3:affirmative}',",
      "",
      "    ${4:// Provider mode: 'replace', 'combine'}",
      "    'provider_mode' => '${5:replace}',",
      "",
      "    ${6:// Allow later GRANT to override earlier DENY}",
      "    'allow_deny_override' => ${7:false},",
      "",
      "    ${8:// Role-based permissions}",
      "    'roles' => [",
      "        '${9:super_admin}' => ['*'], // Wildcard for all permissions",
      "        '${10:admin}' => [",
      "            '${11:users.*}',",
      "            '${12:posts.*}',",
      "            '${13:settings.*}',",
      "            '${14:reports.view}'",
      "        ],",
      "        '${15:editor}' => [",
      "            '${12:posts.*}',",
      "            '${16:comments.moderate}',",
      "            '${17:media.upload}'",
      "        ],",
      "        '${18:author}' => [",
      "            '${19:posts.create}',",
      "            '${20:posts.edit.own}',",
      "            '${21:posts.view}',",
      "            '${17:media.upload}'",
      "        ],",
      "        '${22:user}' => [",
      "            '${21:posts.view}',",
      "            '${23:comments.create}',",
      "            '${24:profile.edit.own}'",
      "        ],",
      "        '${25:subscriber}' => [",
      "            '${21:posts.view}',",
      "            '${26:newsletters.subscribe}'",
      "        ]",
      "    ],",
      "",
      "    ${27:// Policy classes for resources}",
      "    'policies' => [",
      "        '${28:posts}' => ${29:App\\\\Policies\\\\PostPolicy}::class,",
      "        '${30:comments}' => ${31:App\\\\Policies\\\\CommentPolicy}::class,",
      "        '${32:users}' => ${33:App\\\\Policies\\\\UserPolicy}::class,",
      "        ${34:// Can also use model class names}",
      "        ${35:App\\\\Models\\\\Post}::class => ${29:App\\\\Policies\\\\PostPolicy}::class,",
      "    ],",
      "",
      "    ${36:// Super admin roles (bypass all checks)}",
      "    'super_roles' => ['${9:super_admin}'],",
      "",
      "    ${37:// Optional: Custom voter configuration}",
      "    'voters' => [",
      "        ${38:// Custom voters will be registered here}",
      "    ],",
      "",
      "    ${39:// Optional: Permission cache settings}",
      "    'cache' => [",
      "        '${40:enabled}' => ${41:true},",
      "        '${42:ttl}' => ${43:3600}, // 1 hour",
      "        '${44:prefix}' => '${45:perm_cache_}'",
      "    ]",
      "];"
    ],
    "description": "Glueful permissions configuration file with roles, policies, and settings"
  },
  "Glueful route with permissions": {
    "prefix": "gf-route-permissions",
    "body": [
      "${1:// Route with permission middleware}",
      "$router->group(['middleware' => ['${2:auth}', '${3:gate_permissions}']], function ($router) {",
      "    ${4:// Resource routes with automatic permission checking}",
      "    $router->resource('/${5:posts}', ${6:PostController}::class);",
      "    ",
      "    ${7:// Individual routes with specific permissions}",
      "    $router->get('/${8:admin/dashboard}', [${9:AdminController}::class, '${10:dashboard}'])",
      "        ->middleware(['${11:gate_permissions}']);",
      "    ",
      "    $router->post('/${12:posts}/{id}/publish}', [${6:PostController}::class, '${13:publish}'])",
      "        ->middleware(['${3:gate_permissions}']);",
      "});",
      "",
      "${14:// Alternative: Manual permission checking in controller}",
      "$router->group(['middleware' => ['${2:auth}']], function ($router) {",
      "    $router->get('/${15:protected}', function (Request $request) {",
      "        $gate = app(\\\\Glueful\\\\Permissions\\\\Gate::class);",
      "        $user = $request->getAttribute('${16:auth.user}');",
      "        ",
      "        if (!$user) {",
      "            return Response::unauthorized('Authentication required');",
      "        }",
      "        ",
      "        $userIdentity = new \\\\Glueful\\\\Auth\\\\UserIdentity(",
      "            uuid: $user->id,",
      "            roles: $user->roles ?? [],",
      "            scopes: $user->scopes ?? [],",
      "            attributes: $user->toArray()",
      "        );",
      "        ",
      "        $context = new \\\\Glueful\\\\Permissions\\\\Context();",
      "        $decision = $gate->decide($userIdentity, '${17:protected.access}', null, $context);",
      "        ",
      "        if ($decision !== \\\\Glueful\\\\Permissions\\\\Vote::GRANT) {",
      "            return Response::forbidden('Access denied');",
      "        }",
      "        ",
      "        return Response::success(['message' => 'Access granted']);",
      "    });",
      "});",
      "",
      "${18:// API routes with scope-based permissions}",
      "$router->group(['prefix' => '${19:api}', 'middleware' => ['${20:jwt_auth}', '${3:gate_permissions}']], function ($router) {",
      "    $router->get('/${21:user/profile}', [${22:ApiUserController}::class, '${23:profile}']);",
      "    $router->put('/${21:user/profile}', [${22:ApiUserController}::class, '${24:updateProfile}']);",
      "});"
    ],
    "description": "Glueful route definitions with permission middleware and manual checking"
  }
}